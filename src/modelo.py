# -*- coding: utf-8 -*-
"""modelo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VRUcqxA3AqQXEDK9tr6PbBmQYOf46H24

# Modelo de Machine Learning para la indentificacion de voces
## Usando el modelo KNN (K Nearest Neighbour)
"""

from sklearn.neighbors import KNeighborsClassifier

from sklearn.model_selection import train_test_split

from sklearn.metrics import precision_score,confusion_matrix,classification_report

import numpy as np

import pandas as pd


"""## Seleccion y redondeo de los datos"""

route="src/dataset.xlsx"

dataset=pd.read_excel(route) #Importamos los datos y los limpios un poco para nuestro beneficio

dataset=dataset.drop(columns="segment")

dataset['magnitude']=dataset['magnitude'].round(2)

x = dataset.drop('person', axis=1).values

y = dataset.drop(columns=['frequency','magnitude','formant'],axis=1).iloc[:135].values.ravel()


"""# GrÃ¡fico de dispersiÃ³n de los datos (Frecuencia vs Formante)"""

names=["David","Cristian","Christian"]

"""# Hallando la K usando PCA y varianza estadistica"""


"""## Distribucion de los datos y entreno del modelo"""

x_train,x_test,y_train,y_test=train_test_split(x,y,random_state=42,train_size=70)

knn=KNeighborsClassifier(n_neighbors=2)

knn=knn.fit(x_train,y_train)

predicciones=knn.predict(x_test)

precision=precision_score(y_test,predicciones,average='macro')*100

m_confusion=confusion_matrix(y_test,predicciones)

report=classification_report(y_test,predicciones)


"""## Funcion para predecir"""

def predict_With_list(frecuency:float,magnitude:float,formant:float)-> str:

    data_array=np.array([[frecuency,magnitude,formant]]).reshape(1,-1)

    predecit_names=knn.predict(data_array)

    return f"{names[predecit_names[0]]}"


print(predict_With_list(320.200,1485318.68,171.4079))